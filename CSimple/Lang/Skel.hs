-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module CSimple.Lang.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified CSimple.Lang.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: CSimple.Lang.Abs.Id -> Result
transId x = case x of
  CSimple.Lang.Abs.Id string -> failure x

transProgram :: CSimple.Lang.Abs.Program -> Result
transProgram x = case x of
  CSimple.Lang.Abs.PDefs defs -> failure x

transDef :: CSimple.Lang.Abs.Def -> Result
transDef x = case x of
  CSimple.Lang.Abs.DFun type_ id args stms -> failure x

transArg :: CSimple.Lang.Abs.Arg -> Result
transArg x = case x of
  CSimple.Lang.Abs.ADecl type_ id -> failure x

transStm :: CSimple.Lang.Abs.Stm -> Result
transStm x = case x of
  CSimple.Lang.Abs.SExp exp -> failure x
  CSimple.Lang.Abs.SDecls type_ ids -> failure x
  CSimple.Lang.Abs.SInit type_ id exp -> failure x
  CSimple.Lang.Abs.SReturn exp -> failure x
  CSimple.Lang.Abs.SWhile exp stm -> failure x
  CSimple.Lang.Abs.SIfElse exp stm1 stm2 -> failure x
  CSimple.Lang.Abs.SBlock stms -> failure x

transExp :: CSimple.Lang.Abs.Exp -> Result
transExp x = case x of
  CSimple.Lang.Abs.EInt integer -> failure x
  CSimple.Lang.Abs.EDouble double -> failure x
  CSimple.Lang.Abs.EString string -> failure x
  CSimple.Lang.Abs.ETrue -> failure x
  CSimple.Lang.Abs.EFalse -> failure x
  CSimple.Lang.Abs.EId id -> failure x
  CSimple.Lang.Abs.ECall id exps -> failure x
  CSimple.Lang.Abs.EPIncr exp -> failure x
  CSimple.Lang.Abs.EPDecr exp -> failure x
  CSimple.Lang.Abs.EIncr exp -> failure x
  CSimple.Lang.Abs.EDecr exp -> failure x
  CSimple.Lang.Abs.ENeg exp -> failure x
  CSimple.Lang.Abs.EMul exp1 exp2 -> failure x
  CSimple.Lang.Abs.EDiv exp1 exp2 -> failure x
  CSimple.Lang.Abs.EAdd exp1 exp2 -> failure x
  CSimple.Lang.Abs.ESub exp1 exp2 -> failure x
  CSimple.Lang.Abs.ELt exp1 exp2 -> failure x
  CSimple.Lang.Abs.EGt exp1 exp2 -> failure x
  CSimple.Lang.Abs.ELEq exp1 exp2 -> failure x
  CSimple.Lang.Abs.EGEq exp1 exp2 -> failure x
  CSimple.Lang.Abs.EEq exp1 exp2 -> failure x
  CSimple.Lang.Abs.ENeq exp1 exp2 -> failure x
  CSimple.Lang.Abs.EAnd exp1 exp2 -> failure x
  CSimple.Lang.Abs.EOr exp1 exp2 -> failure x
  CSimple.Lang.Abs.EAss exp1 exp2 -> failure x
  CSimple.Lang.Abs.ETyped exp type_ -> failure x
  CSimple.Lang.Abs.EConv type_ exp -> failure x

transType :: CSimple.Lang.Abs.Type -> Result
transType x = case x of
  CSimple.Lang.Abs.Tbool -> failure x
  CSimple.Lang.Abs.Tdouble -> failure x
  CSimple.Lang.Abs.Tint -> failure x
  CSimple.Lang.Abs.Tstring -> failure x
  CSimple.Lang.Abs.Tvoid -> failure x
