-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Lang.

module CSimple.Lang.Abs where

import Prelude (Double, Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )

data Program = PDefs [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def = DFun Type Id [Arg] [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ADecl Type Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SExp Exp
    | SDecls Type [Id]
    | SInit Type Id Exp
    | SReturn Exp
    | SWhile Exp Stm
    | SIfElse Exp Stm Stm
    | SBlock [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EString String
    | ETrue
    | EFalse
    | EId Id
    | ECall Id [Exp]
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELEq Exp Exp
    | EGEq Exp Exp
    | EEq Exp Exp
    | ENeq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | ETyped Exp Type
    | EConv Type Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Tbool | Tdouble | Tint | Tstring | Tvoid
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Id = Id ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Id where
  hasPosition (Id (p, _)) = C.Just p

